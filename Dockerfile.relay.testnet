FROM golang:1.13-alpine as builder
LABEL maintainer="ceo@playent.net"

# Force Go to use the cgo based DNS resolver. This is required to ensure DNS
# queries required to connect to linked containers succeed.
ENV GODEBUG netdns=cgo

# Pass a tag, branch or a commit using build-arg.  This allows a docker
# image to be built from a specified Git state.  The default image
# will use the Git tip of master by default.
# ARG checkout="v0.11.1-beta"
ARG checkout="v0.12.1-beta-branch"
# ARG checkout="master"

# Install dependencies and build the binaries.
RUN apk add --no-cache --update alpine-sdk git make gcc openssh-client

RUN git clone https://github.com/lightningnetwork/lnd /go/src/github.com/lightningnetwork/lnd
RUN cd /go/src/github.com/lightningnetwork/lnd \
    &&  git checkout $checkout \
    &&  make \
    &&  make install tags="signrpc walletrpc chainrpc invoicesrpc experimental"

# Start a new, final image.
# FROM alpine:3.11 as final
FROM ubuntu:bionic as final
# FROM alpine:3.11 as final

EXPOSE 80
EXPOSE 9735

ENV NODE_ENV production
ENV NODE_SCHEME http

# Add bash and ca-certs, for quality of life and SSL-related reasons.
# RUN apk --no-cache add bash ca-certificates
RUN apt-get update

RUN apt-get -y install curl dirmngr apt-transport-https lsb-release ca-certificates
RUN curl -sL https://deb.nodesource.com/setup_12.x | bash -
RUN apt-get -y install nodejs sqlite

RUN apt-get install -y git supervisor

# Copy the binaries from the builder image.
COPY --from=builder /go/bin/lncli /bin/
COPY --from=builder /go/bin/lnd /bin/

# RUN apk add --no-cache --update nodejs=12.21.0-r0 nodejs-npm=12.21.0-r0 sqlite=3.30.1-r2 
# RUN apt-get install -y nodejs=12.21.0-r0 nodejs-npm=12.21.0-r0 sqlite=3.30.1-r2 

# RUN git clone https://github.com/masterial/play-platform-relay /relay/
# WORKDIR /relay
# ARG branch="main"
# RUN git checkout $branch

WORKDIR /relay
COPY . .

# RUN apk --update --no-cache \
#     add  \
#     automake \
#     git \
#     alpine-sdk  \
#     nasm  \
#     autoconf  \
#     build-base \
#     zlib \
#     zlib-dev \
#     libpng \
#     libpng-dev\
#     libwebp \
#     libwebp-dev \
#     libjpeg-turbo \
#     libjpeg-turbo-dev \
#     g++ \
#     gcc \
#     libgcc \
#     libstdc++ \
#     linux-headers \
#     make \
#     python \
#     jq \
#     curl \
#     libmcrypt-dev \
#     vim

RUN apt-get install -y \
    automake \
    git \
    nasm  \
    autoconf  \
    libpng-dev\
    libwebp-dev \
    g++ \
    gcc \
    # libstdc++ \
    make \
    python \
    jq \
    curl \
    libmcrypt-dev \
    vim \
    wget \
    unzip

# RUN apk --no-cache add vim

USER root

RUN rm -rf node_modules/
RUN npm install
RUN npm install --quiet node-gyp@3.8.0 -g
RUN npm -g config set user root
RUN npm install nw-gyp -g
RUN npm uninstall sqlite3
RUN npm install sqlite3 --build-from-source --runtime=node-webkit --target_arch=x64 --target=0.42.0
RUN npm rebuild

RUN npm install --only=dev
RUN npm run build
RUN npm rebuild node-sass

VOLUME /relay/.lnd

COPY ./docker/lnd.conf.testnet.sample /relay/.lnd/lnd.conf

#Uncomment if you have a copy of the channel.db you want to use.
#COPY ./channel.db /relay/.lnd/data/graph/mainnet/

RUN git clone https://github.com/n2n2dev/sphinx-keysend-test /sphinx-keysend/
WORKDIR /sphinx-keysend/

ARG sphinx_keysend_checkout="binary"

RUN git checkout $sphinx_keysend_checkout
RUN npm install

WORKDIR /relay/

# RUN apk --no-cache add expect bash

RUN mkdir -p /var/log/supervisor
COPY ./docker/supervisord.conf /etc/supervisord.conf
COPY ./docker/lnd_supervisor.conf /etc/supervisor.d/lnd_supervisor.ini
COPY ./docker/relay_supervisor.conf /etc/supervisor.d/relay_supervisor.ini
COPY ./docker/aliases.sh /etc/profile.d/aliases.sh

CMD touch ./sphinx.db

ENV ENV="/etc/profile"

ENTRYPOINT [ "bash", "/relay/docker/entrypoint.relay.sh" ]
